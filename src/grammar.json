{
  "name": "fsharp",
  "rules": {
    "test": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "comment"
        },
        {
          "type": "SYMBOL",
          "name": "identifier"
        },
        {
          "type": "SYMBOL",
          "name": "keyword"
        }
      ]
    },
    "comment": {
      "type": "TOKEN",
      "content": {
        "type": "CHOICE",
        "members": [
          {
            "type": "SEQ",
            "members": [
              {
                "type": "STRING",
                "value": "(*"
              },
              {
                "type": "REPEAT",
                "content": {
                  "type": "PATTERN",
                  "value": ".|\\n|\\r"
                }
              },
              {
                "type": "STRING",
                "value": "*)"
              }
            ]
          },
          {
            "type": "SEQ",
            "members": [
              {
                "type": "STRING",
                "value": "//"
              },
              {
                "type": "PATTERN",
                "value": "[^\\n\\r]*"
              }
            ]
          }
        ]
      }
    },
    "_letter_char": {
      "type": "PATTERN",
      "value": "[a-zA-Z]"
    },
    "_digit_char": {
      "type": "PATTERN",
      "value": "[0-9]"
    },
    "_connecting_char": {
      "type": "PATTERN",
      "value": "[:punct:]"
    },
    "_formatting_char": {
      "type": "PATTERN",
      "value": "[:cntrl:]"
    },
    "_identifier_start_char": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "_letter_char"
        },
        {
          "type": "PATTERN",
          "value": "_"
        }
      ]
    },
    "_identifier_char": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "_letter_char"
        },
        {
          "type": "SYMBOL",
          "name": "_digit_char"
        },
        {
          "type": "SYMBOL",
          "name": "_connecting_char"
        },
        {
          "type": "SYMBOL",
          "name": "_formatting_char"
        },
        {
          "type": "PATTERN",
          "value": "'"
        },
        {
          "type": "PATTERN",
          "value": "_"
        }
      ]
    },
    "_ident_text": {
      "type": "SEQ",
      "members": [
        {
          "type": "SYMBOL",
          "name": "_identifier_start_char"
        },
        {
          "type": "CHOICE",
          "members": [
            {
              "type": "REPEAT",
              "content": {
                "type": "SYMBOL",
                "name": "_identifier_char"
              }
            },
            {
              "type": "BLANK"
            }
          ]
        }
      ]
    },
    "_escaped_ident_text": {
      "type": "PATTERN",
      "value": "``([^`\\n\\r\\t] | `[^`\\n\\r\\t])+``"
    },
    "keyword": {
      "type": "CHOICE",
      "members": [
        {
          "type": "STRING",
          "value": "abstract"
        },
        {
          "type": "STRING",
          "value": "and"
        },
        {
          "type": "STRING",
          "value": "as"
        },
        {
          "type": "STRING",
          "value": "assert"
        },
        {
          "type": "STRING",
          "value": "base"
        },
        {
          "type": "STRING",
          "value": "begin"
        },
        {
          "type": "STRING",
          "value": "class"
        },
        {
          "type": "STRING",
          "value": "default"
        },
        {
          "type": "STRING",
          "value": "delegate"
        },
        {
          "type": "STRING",
          "value": "do"
        },
        {
          "type": "STRING",
          "value": "done"
        },
        {
          "type": "STRING",
          "value": "downcast"
        },
        {
          "type": "STRING",
          "value": "downto"
        },
        {
          "type": "STRING",
          "value": "elif"
        },
        {
          "type": "STRING",
          "value": "else"
        },
        {
          "type": "STRING",
          "value": "end"
        },
        {
          "type": "STRING",
          "value": "exception"
        },
        {
          "type": "STRING",
          "value": "extern"
        },
        {
          "type": "STRING",
          "value": "false"
        },
        {
          "type": "STRING",
          "value": "finally"
        },
        {
          "type": "STRING",
          "value": "for"
        },
        {
          "type": "STRING",
          "value": "fun"
        },
        {
          "type": "STRING",
          "value": "function"
        },
        {
          "type": "STRING",
          "value": "global"
        },
        {
          "type": "STRING",
          "value": "if"
        },
        {
          "type": "STRING",
          "value": "in"
        },
        {
          "type": "STRING",
          "value": "inherit"
        },
        {
          "type": "STRING",
          "value": "inline"
        },
        {
          "type": "STRING",
          "value": "interface"
        },
        {
          "type": "STRING",
          "value": "internal"
        },
        {
          "type": "STRING",
          "value": "lazy"
        },
        {
          "type": "STRING",
          "value": "let"
        },
        {
          "type": "STRING",
          "value": "match"
        },
        {
          "type": "STRING",
          "value": "member"
        },
        {
          "type": "STRING",
          "value": "module"
        },
        {
          "type": "STRING",
          "value": "mutable"
        },
        {
          "type": "STRING",
          "value": "namespace"
        },
        {
          "type": "STRING",
          "value": "new"
        },
        {
          "type": "STRING",
          "value": "null"
        },
        {
          "type": "STRING",
          "value": "of"
        },
        {
          "type": "STRING",
          "value": "open"
        },
        {
          "type": "STRING",
          "value": "or"
        },
        {
          "type": "STRING",
          "value": "override"
        },
        {
          "type": "STRING",
          "value": "private"
        },
        {
          "type": "STRING",
          "value": "public"
        },
        {
          "type": "STRING",
          "value": "rec"
        },
        {
          "type": "STRING",
          "value": "return"
        },
        {
          "type": "STRING",
          "value": "sig"
        },
        {
          "type": "STRING",
          "value": "static"
        },
        {
          "type": "STRING",
          "value": "struct"
        },
        {
          "type": "STRING",
          "value": "then"
        },
        {
          "type": "STRING",
          "value": "to"
        },
        {
          "type": "STRING",
          "value": "true"
        },
        {
          "type": "STRING",
          "value": "try"
        },
        {
          "type": "STRING",
          "value": "type"
        },
        {
          "type": "STRING",
          "value": "upcast"
        },
        {
          "type": "STRING",
          "value": "use"
        },
        {
          "type": "STRING",
          "value": "val"
        },
        {
          "type": "STRING",
          "value": "void"
        },
        {
          "type": "STRING",
          "value": "when"
        },
        {
          "type": "STRING",
          "value": "while"
        },
        {
          "type": "STRING",
          "value": "with"
        },
        {
          "type": "STRING",
          "value": "yield"
        },
        {
          "type": "STRING",
          "value": "atomic"
        },
        {
          "type": "STRING",
          "value": "break"
        },
        {
          "type": "STRING",
          "value": "checked"
        },
        {
          "type": "STRING",
          "value": "component"
        },
        {
          "type": "STRING",
          "value": "const"
        },
        {
          "type": "STRING",
          "value": "constraint"
        },
        {
          "type": "STRING",
          "value": "constructor"
        },
        {
          "type": "STRING",
          "value": "continue"
        },
        {
          "type": "STRING",
          "value": "eager"
        },
        {
          "type": "STRING",
          "value": "fixed"
        },
        {
          "type": "STRING",
          "value": "fori"
        },
        {
          "type": "STRING",
          "value": "functor"
        },
        {
          "type": "STRING",
          "value": "include"
        },
        {
          "type": "STRING",
          "value": "measure"
        },
        {
          "type": "STRING",
          "value": "method"
        },
        {
          "type": "STRING",
          "value": "mixin"
        },
        {
          "type": "STRING",
          "value": "object"
        },
        {
          "type": "STRING",
          "value": "parallel"
        },
        {
          "type": "STRING",
          "value": "params"
        },
        {
          "type": "STRING",
          "value": "process"
        },
        {
          "type": "STRING",
          "value": "protected"
        },
        {
          "type": "STRING",
          "value": "pure"
        },
        {
          "type": "STRING",
          "value": "recursive"
        },
        {
          "type": "STRING",
          "value": "sealed"
        },
        {
          "type": "STRING",
          "value": "tailcall"
        },
        {
          "type": "STRING",
          "value": "trait"
        },
        {
          "type": "STRING",
          "value": "virtual"
        },
        {
          "type": "STRING",
          "value": "volatile"
        }
      ]
    },
    "identifier": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "_ident_text"
        },
        {
          "type": "SYMBOL",
          "name": "_escaped_ident_text"
        }
      ]
    }
  },
  "extras": [
    {
      "type": "PATTERN",
      "value": "\\s"
    }
  ],
  "conflicts": [],
  "externals": [],
  "inline": [],
  "supertypes": []
}

