{
  "name": "fsharp",
  "rules": {
    "test": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "comment"
        },
        {
          "type": "SYMBOL",
          "name": "verbatim_string"
        },
        {
          "type": "SYMBOL",
          "name": "verbatim_bytearray"
        },
        {
          "type": "SYMBOL",
          "name": "triple_quoted_string"
        },
        {
          "type": "SYMBOL",
          "name": "identifier"
        },
        {
          "type": "SYMBOL",
          "name": "keyword"
        },
        {
          "type": "SYMBOL",
          "name": "bytearray"
        },
        {
          "type": "SYMBOL",
          "name": "bytechar"
        },
        {
          "type": "SYMBOL",
          "name": "string"
        },
        {
          "type": "SYMBOL",
          "name": "char"
        },
        {
          "type": "SYMBOL",
          "name": "cond_directive"
        },
        {
          "type": "SYMBOL",
          "name": "symbolic_keyword"
        },
        {
          "type": "SYMBOL",
          "name": "symbolic_op"
        }
      ]
    },
    "_whitespace": {
      "type": "REPEAT1",
      "content": {
        "type": "STRING",
        "value": " "
      }
    },
    "_newline": {
      "type": "CHOICE",
      "members": [
        {
          "type": "STRING",
          "value": "\n"
        },
        {
          "type": "STRING",
          "value": "\r\n"
        }
      ]
    },
    "_whitespace_or_newline": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "_whitespace"
        },
        {
          "type": "SYMBOL",
          "name": "_newline"
        }
      ]
    },
    "_single_line_comment": {
      "type": "SEQ",
      "members": [
        {
          "type": "STRING",
          "value": "//"
        },
        {
          "type": "PATTERN",
          "value": "[^\\n\\r]*"
        }
      ]
    },
    "_multi_line_comment": {
      "type": "SEQ",
      "members": [
        {
          "type": "STRING",
          "value": "(*"
        },
        {
          "type": "REPEAT",
          "content": {
            "type": "PATTERN",
            "value": ".|\\n|\\r"
          }
        },
        {
          "type": "STRING",
          "value": "*)"
        }
      ]
    },
    "comment": {
      "type": "TOKEN",
      "content": {
        "type": "CHOICE",
        "members": [
          {
            "type": "SEQ",
            "members": [
              {
                "type": "STRING",
                "value": "//"
              },
              {
                "type": "PATTERN",
                "value": "[^\\n\\r]*"
              }
            ]
          },
          {
            "type": "SEQ",
            "members": [
              {
                "type": "STRING",
                "value": "(*"
              },
              {
                "type": "REPEAT",
                "content": {
                  "type": "PATTERN",
                  "value": ".|\\n|\\r"
                }
              },
              {
                "type": "STRING",
                "value": "*)"
              }
            ]
          }
        ]
      }
    },
    "cond_directive": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "if_directive"
        },
        {
          "type": "SYMBOL",
          "name": "else_directive"
        },
        {
          "type": "SYMBOL",
          "name": "endif_directive"
        }
      ]
    },
    "if_directive": {
      "type": "SEQ",
      "members": [
        {
          "type": "STRING",
          "value": "#if"
        },
        {
          "type": "SYMBOL",
          "name": "_if_expression_text"
        }
      ]
    },
    "else_directive": {
      "type": "STRING",
      "value": "#else"
    },
    "endif_directive": {
      "type": "STRING",
      "value": "#endif"
    },
    "_if_expression_text": {
      "type": "CHOICE",
      "members": [
        {
          "type": "PREC_LEFT",
          "value": 1,
          "content": {
            "type": "SEQ",
            "members": [
              {
                "type": "SYMBOL",
                "name": "_if_expression_text"
              },
              {
                "type": "STRING",
                "value": "||"
              },
              {
                "type": "SYMBOL",
                "name": "_if_expression_text"
              }
            ]
          }
        },
        {
          "type": "PREC_LEFT",
          "value": 2,
          "content": {
            "type": "SEQ",
            "members": [
              {
                "type": "SYMBOL",
                "name": "_if_expression_text"
              },
              {
                "type": "STRING",
                "value": "&&"
              },
              {
                "type": "SYMBOL",
                "name": "_if_expression_text"
              }
            ]
          }
        },
        {
          "type": "PREC_LEFT",
          "value": 3,
          "content": {
            "type": "SEQ",
            "members": [
              {
                "type": "STRING",
                "value": "!"
              },
              {
                "type": "SYMBOL",
                "name": "_if_expression_text"
              }
            ]
          }
        },
        {
          "type": "PREC_LEFT",
          "value": 4,
          "content": {
            "type": "SEQ",
            "members": [
              {
                "type": "STRING",
                "value": "("
              },
              {
                "type": "SYMBOL",
                "name": "_if_expression_text"
              },
              {
                "type": "STRING",
                "value": ")"
              }
            ]
          }
        },
        {
          "type": "SYMBOL",
          "name": "_ident_text"
        }
      ]
    },
    "_digit_char": {
      "type": "PATTERN",
      "value": "[0-9]"
    },
    "_letter_char": {
      "type": "PATTERN",
      "value": "\\p{Lu}|\\p{Ll}|\\p{Lt}|\\p{Lm}|\\p{Lo}|\\p{Nl}"
    },
    "_connecting_char": {
      "type": "PATTERN",
      "value": "\\p{Pc}"
    },
    "_combining_char": {
      "type": "PATTERN",
      "value": "\\p{Mn}|\\p{Mc}"
    },
    "_formatting_char": {
      "type": "PATTERN",
      "value": "\\p{Cf}"
    },
    "_identifier_start_char": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "_letter_char"
        },
        {
          "type": "PATTERN",
          "value": "_"
        }
      ]
    },
    "_identifier_char": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "_letter_char"
        },
        {
          "type": "SYMBOL",
          "name": "_digit_char"
        },
        {
          "type": "SYMBOL",
          "name": "_connecting_char"
        },
        {
          "type": "SYMBOL",
          "name": "_combining_char"
        },
        {
          "type": "SYMBOL",
          "name": "_formatting_char"
        },
        {
          "type": "PATTERN",
          "value": "'"
        },
        {
          "type": "PATTERN",
          "value": "_"
        }
      ]
    },
    "_ident_text": {
      "type": "SEQ",
      "members": [
        {
          "type": "SYMBOL",
          "name": "_identifier_start_char"
        },
        {
          "type": "REPEAT",
          "content": {
            "type": "SYMBOL",
            "name": "_identifier_char"
          }
        }
      ]
    },
    "_escaped_ident_text": {
      "type": "PATTERN",
      "value": "``([^`\\n\\r\\t] | `[^`\\n\\r\\t])+``"
    },
    "identifier": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "_ident_text"
        },
        {
          "type": "SYMBOL",
          "name": "_escaped_ident_text"
        }
      ]
    },
    "keyword": {
      "type": "CHOICE",
      "members": [
        {
          "type": "STRING",
          "value": "abstract"
        },
        {
          "type": "STRING",
          "value": "and"
        },
        {
          "type": "STRING",
          "value": "as"
        },
        {
          "type": "STRING",
          "value": "assert"
        },
        {
          "type": "STRING",
          "value": "base"
        },
        {
          "type": "STRING",
          "value": "begin"
        },
        {
          "type": "STRING",
          "value": "class"
        },
        {
          "type": "STRING",
          "value": "default"
        },
        {
          "type": "STRING",
          "value": "delegate"
        },
        {
          "type": "STRING",
          "value": "do"
        },
        {
          "type": "STRING",
          "value": "done"
        },
        {
          "type": "STRING",
          "value": "downcast"
        },
        {
          "type": "STRING",
          "value": "downto"
        },
        {
          "type": "STRING",
          "value": "elif"
        },
        {
          "type": "STRING",
          "value": "else"
        },
        {
          "type": "STRING",
          "value": "end"
        },
        {
          "type": "STRING",
          "value": "exception"
        },
        {
          "type": "STRING",
          "value": "extern"
        },
        {
          "type": "STRING",
          "value": "false"
        },
        {
          "type": "STRING",
          "value": "finally"
        },
        {
          "type": "STRING",
          "value": "for"
        },
        {
          "type": "STRING",
          "value": "fun"
        },
        {
          "type": "STRING",
          "value": "function"
        },
        {
          "type": "STRING",
          "value": "global"
        },
        {
          "type": "STRING",
          "value": "if"
        },
        {
          "type": "STRING",
          "value": "in"
        },
        {
          "type": "STRING",
          "value": "inherit"
        },
        {
          "type": "STRING",
          "value": "inline"
        },
        {
          "type": "STRING",
          "value": "interface"
        },
        {
          "type": "STRING",
          "value": "internal"
        },
        {
          "type": "STRING",
          "value": "lazy"
        },
        {
          "type": "STRING",
          "value": "let"
        },
        {
          "type": "STRING",
          "value": "match"
        },
        {
          "type": "STRING",
          "value": "member"
        },
        {
          "type": "STRING",
          "value": "module"
        },
        {
          "type": "STRING",
          "value": "mutable"
        },
        {
          "type": "STRING",
          "value": "namespace"
        },
        {
          "type": "STRING",
          "value": "new"
        },
        {
          "type": "STRING",
          "value": "null"
        },
        {
          "type": "STRING",
          "value": "of"
        },
        {
          "type": "STRING",
          "value": "open"
        },
        {
          "type": "STRING",
          "value": "or"
        },
        {
          "type": "STRING",
          "value": "override"
        },
        {
          "type": "STRING",
          "value": "private"
        },
        {
          "type": "STRING",
          "value": "public"
        },
        {
          "type": "STRING",
          "value": "rec"
        },
        {
          "type": "STRING",
          "value": "return"
        },
        {
          "type": "STRING",
          "value": "sig"
        },
        {
          "type": "STRING",
          "value": "static"
        },
        {
          "type": "STRING",
          "value": "struct"
        },
        {
          "type": "STRING",
          "value": "then"
        },
        {
          "type": "STRING",
          "value": "to"
        },
        {
          "type": "STRING",
          "value": "true"
        },
        {
          "type": "STRING",
          "value": "try"
        },
        {
          "type": "STRING",
          "value": "type"
        },
        {
          "type": "STRING",
          "value": "upcast"
        },
        {
          "type": "STRING",
          "value": "use"
        },
        {
          "type": "STRING",
          "value": "val"
        },
        {
          "type": "STRING",
          "value": "void"
        },
        {
          "type": "STRING",
          "value": "when"
        },
        {
          "type": "STRING",
          "value": "while"
        },
        {
          "type": "STRING",
          "value": "with"
        },
        {
          "type": "STRING",
          "value": "yield"
        },
        {
          "type": "STRING",
          "value": "atomic"
        },
        {
          "type": "STRING",
          "value": "break"
        },
        {
          "type": "STRING",
          "value": "checked"
        },
        {
          "type": "STRING",
          "value": "component"
        },
        {
          "type": "STRING",
          "value": "const"
        },
        {
          "type": "STRING",
          "value": "constraint"
        },
        {
          "type": "STRING",
          "value": "constructor"
        },
        {
          "type": "STRING",
          "value": "continue"
        },
        {
          "type": "STRING",
          "value": "eager"
        },
        {
          "type": "STRING",
          "value": "fixed"
        },
        {
          "type": "STRING",
          "value": "fori"
        },
        {
          "type": "STRING",
          "value": "functor"
        },
        {
          "type": "STRING",
          "value": "include"
        },
        {
          "type": "STRING",
          "value": "measure"
        },
        {
          "type": "STRING",
          "value": "method"
        },
        {
          "type": "STRING",
          "value": "mixin"
        },
        {
          "type": "STRING",
          "value": "object"
        },
        {
          "type": "STRING",
          "value": "parallel"
        },
        {
          "type": "STRING",
          "value": "params"
        },
        {
          "type": "STRING",
          "value": "process"
        },
        {
          "type": "STRING",
          "value": "protected"
        },
        {
          "type": "STRING",
          "value": "pure"
        },
        {
          "type": "STRING",
          "value": "recursive"
        },
        {
          "type": "STRING",
          "value": "sealed"
        },
        {
          "type": "STRING",
          "value": "tailcall"
        },
        {
          "type": "STRING",
          "value": "trait"
        },
        {
          "type": "STRING",
          "value": "virtual"
        },
        {
          "type": "STRING",
          "value": "volatile"
        }
      ]
    },
    "_escape_char": {
      "type": "IMMEDIATE_TOKEN",
      "content": {
        "type": "PATTERN",
        "value": "\\\\[\"\\'ntbrafv]"
      }
    },
    "_non_escape_char": {
      "type": "IMMEDIATE_TOKEN",
      "content": {
        "type": "PATTERN",
        "value": "\\\\[^\"\\'ntbrafv]"
      }
    },
    "_simple_char_char": {
      "type": "IMMEDIATE_TOKEN",
      "content": {
        "type": "PATTERN",
        "value": "[^\\n\\t\\r\\u0008\\a\\f\\v'\\\\]"
      }
    },
    "_hex_digit": {
      "type": "IMMEDIATE_TOKEN",
      "content": {
        "type": "PATTERN",
        "value": "[0-9a-fA-F]"
      }
    },
    "_unicodegraph_short": {
      "type": "SEQ",
      "members": [
        {
          "type": "IMMEDIATE_TOKEN",
          "content": {
            "type": "STRING",
            "value": "\\u"
          }
        },
        {
          "type": "SYMBOL",
          "name": "_hex_digit"
        },
        {
          "type": "SYMBOL",
          "name": "_hex_digit"
        },
        {
          "type": "SYMBOL",
          "name": "_hex_digit"
        },
        {
          "type": "SYMBOL",
          "name": "_hex_digit"
        }
      ]
    },
    "_unicodegraph_long": {
      "type": "SEQ",
      "members": [
        {
          "type": "IMMEDIATE_TOKEN",
          "content": {
            "type": "STRING",
            "value": "\\U"
          }
        },
        {
          "type": "SYMBOL",
          "name": "_hex_digit"
        },
        {
          "type": "SYMBOL",
          "name": "_hex_digit"
        },
        {
          "type": "SYMBOL",
          "name": "_hex_digit"
        },
        {
          "type": "SYMBOL",
          "name": "_hex_digit"
        },
        {
          "type": "SYMBOL",
          "name": "_hex_digit"
        },
        {
          "type": "SYMBOL",
          "name": "_hex_digit"
        },
        {
          "type": "SYMBOL",
          "name": "_hex_digit"
        },
        {
          "type": "SYMBOL",
          "name": "_hex_digit"
        }
      ]
    },
    "_trigraph": {
      "type": "SEQ",
      "members": [
        {
          "type": "IMMEDIATE_TOKEN",
          "content": {
            "type": "STRING",
            "value": "\\"
          }
        },
        {
          "type": "SYMBOL",
          "name": "_digit_char"
        },
        {
          "type": "SYMBOL",
          "name": "_digit_char"
        },
        {
          "type": "SYMBOL",
          "name": "_digit_char"
        }
      ]
    },
    "_char_char": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "_simple_char_char"
        },
        {
          "type": "SYMBOL",
          "name": "_escape_char"
        },
        {
          "type": "SYMBOL",
          "name": "_trigraph"
        },
        {
          "type": "SYMBOL",
          "name": "_unicodegraph_short"
        }
      ]
    },
    "_simple_string_char": {
      "type": "PATTERN",
      "value": "[^\\t\\r\\u0008\\a\\f\\v\\\\\"]"
    },
    "_string_char": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "_simple_string_char"
        },
        {
          "type": "SYMBOL",
          "name": "_escape_char"
        },
        {
          "type": "SYMBOL",
          "name": "_non_escape_char"
        },
        {
          "type": "SYMBOL",
          "name": "_trigraph"
        },
        {
          "type": "SYMBOL",
          "name": "_unicodegraph_short"
        },
        {
          "type": "SYMBOL",
          "name": "_unicodegraph_long"
        },
        {
          "type": "SYMBOL",
          "name": "_newline"
        }
      ]
    },
    "_string_elem": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "_string_char"
        },
        {
          "type": "SEQ",
          "members": [
            {
              "type": "STRING",
              "value": "\\"
            },
            {
              "type": "SYMBOL",
              "name": "_newline"
            },
            {
              "type": "REPEAT",
              "content": {
                "type": "SYMBOL",
                "name": "_whitespace"
              }
            },
            {
              "type": "SYMBOL",
              "name": "_string_elem"
            }
          ]
        }
      ]
    },
    "char": {
      "type": "SEQ",
      "members": [
        {
          "type": "STRING",
          "value": "'"
        },
        {
          "type": "SYMBOL",
          "name": "_char_char"
        },
        {
          "type": "IMMEDIATE_TOKEN",
          "content": {
            "type": "STRING",
            "value": "'"
          }
        }
      ]
    },
    "string": {
      "type": "SEQ",
      "members": [
        {
          "type": "STRING",
          "value": "\""
        },
        {
          "type": "REPEAT",
          "content": {
            "type": "SYMBOL",
            "name": "_string_char"
          }
        },
        {
          "type": "IMMEDIATE_TOKEN",
          "content": {
            "type": "STRING",
            "value": "\""
          }
        }
      ]
    },
    "_verbatim_string_char": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "_simple_string_char"
        },
        {
          "type": "SYMBOL",
          "name": "_non_escape_char"
        },
        {
          "type": "SYMBOL",
          "name": "_newline"
        },
        {
          "type": "STRING",
          "value": "\\"
        },
        {
          "type": "STRING",
          "value": ""
        }
      ]
    },
    "verbatim_string": {
      "type": "SEQ",
      "members": [
        {
          "type": "STRING",
          "value": "@\""
        },
        {
          "type": "REPEAT",
          "content": {
            "type": "SYMBOL",
            "name": "_verbatim_string_char"
          }
        },
        {
          "type": "IMMEDIATE_TOKEN",
          "content": {
            "type": "STRING",
            "value": "\""
          }
        }
      ]
    },
    "bytechar": {
      "type": "SEQ",
      "members": [
        {
          "type": "STRING",
          "value": "'"
        },
        {
          "type": "SYMBOL",
          "name": "_char_char"
        },
        {
          "type": "IMMEDIATE_TOKEN",
          "content": {
            "type": "STRING",
            "value": "'B"
          }
        }
      ]
    },
    "bytearray": {
      "type": "SEQ",
      "members": [
        {
          "type": "STRING",
          "value": "\""
        },
        {
          "type": "REPEAT",
          "content": {
            "type": "SYMBOL",
            "name": "_string_char"
          }
        },
        {
          "type": "IMMEDIATE_TOKEN",
          "content": {
            "type": "STRING",
            "value": "\"B"
          }
        }
      ]
    },
    "verbatim_bytearray": {
      "type": "SEQ",
      "members": [
        {
          "type": "STRING",
          "value": "@\""
        },
        {
          "type": "REPEAT",
          "content": {
            "type": "SYMBOL",
            "name": "_verbatim_string_char"
          }
        },
        {
          "type": "IMMEDIATE_TOKEN",
          "content": {
            "type": "STRING",
            "value": "\"B"
          }
        }
      ]
    },
    "_simple_or_escape_char": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "_escape_char"
        },
        {
          "type": "IMMEDIATE_TOKEN",
          "content": {
            "type": "PATTERN",
            "value": "[^'\\\\]"
          }
        }
      ]
    },
    "triple_quoted_string": {
      "type": "SEQ",
      "members": [
        {
          "type": "STRING",
          "value": "\"\"\""
        },
        {
          "type": "REPEAT",
          "content": {
            "type": "SYMBOL",
            "name": "_simple_or_escape_char"
          }
        },
        {
          "type": "IMMEDIATE_TOKEN",
          "content": {
            "type": "STRING",
            "value": "\"\"\""
          }
        }
      ]
    },
    "symbolic_keyword": {
      "type": "CHOICE",
      "members": [
        {
          "type": "STRING",
          "value": "let!"
        },
        {
          "type": "STRING",
          "value": "use!"
        },
        {
          "type": "STRING",
          "value": "do!"
        },
        {
          "type": "STRING",
          "value": "yield!"
        },
        {
          "type": "STRING",
          "value": "return!"
        },
        {
          "type": "STRING",
          "value": "|"
        },
        {
          "type": "STRING",
          "value": "->"
        },
        {
          "type": "STRING",
          "value": "<-."
        },
        {
          "type": "STRING",
          "value": ":"
        },
        {
          "type": "STRING",
          "value": "("
        },
        {
          "type": "STRING",
          "value": ")"
        },
        {
          "type": "STRING",
          "value": "["
        },
        {
          "type": "STRING",
          "value": "]"
        },
        {
          "type": "STRING",
          "value": "[<"
        },
        {
          "type": "STRING",
          "value": ">]"
        },
        {
          "type": "STRING",
          "value": "[|"
        },
        {
          "type": "STRING",
          "value": "|]"
        },
        {
          "type": "STRING",
          "value": "{"
        },
        {
          "type": "STRING",
          "value": "}"
        },
        {
          "type": "STRING",
          "value": "'"
        },
        {
          "type": "STRING",
          "value": "#"
        },
        {
          "type": "STRING",
          "value": ":?>"
        },
        {
          "type": "STRING",
          "value": ":?"
        },
        {
          "type": "STRING",
          "value": ":>"
        },
        {
          "type": "STRING",
          "value": ".."
        },
        {
          "type": "STRING",
          "value": "::"
        },
        {
          "type": "STRING",
          "value": ":="
        },
        {
          "type": "STRING",
          "value": ";;"
        },
        {
          "type": "STRING",
          "value": ";"
        },
        {
          "type": "STRING",
          "value": "=_"
        },
        {
          "type": "STRING",
          "value": "?"
        },
        {
          "type": "STRING",
          "value": "??"
        },
        {
          "type": "STRING",
          "value": "(*)"
        },
        {
          "type": "STRING",
          "value": "<@"
        },
        {
          "type": "STRING",
          "value": "@>"
        },
        {
          "type": "STRING",
          "value": "<@@"
        },
        {
          "type": "STRING",
          "value": "@@>"
        },
        {
          "type": "STRING",
          "value": "~"
        },
        {
          "type": "STRING",
          "value": "`"
        }
      ]
    },
    "_first_op_char": {
      "type": "PATTERN",
      "value": "[!%&*+-./<=>@^|~]"
    },
    "_op_char": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "_first_op_char"
        },
        {
          "type": "STRING",
          "value": "?"
        }
      ]
    },
    "_quote_op_left": {
      "type": "CHOICE",
      "members": [
        {
          "type": "STRING",
          "value": "<@"
        },
        {
          "type": "STRING",
          "value": "<@@"
        }
      ]
    },
    "_quote_op_right": {
      "type": "CHOICE",
      "members": [
        {
          "type": "STRING",
          "value": "@>"
        },
        {
          "type": "STRING",
          "value": "@@>"
        }
      ]
    },
    "symbolic_op": {
      "type": "CHOICE",
      "members": [
        {
          "type": "STRING",
          "value": "?"
        },
        {
          "type": "STRING",
          "value": "?<-"
        },
        {
          "type": "SEQ",
          "members": [
            {
              "type": "SYMBOL",
              "name": "_first_op_char"
            },
            {
              "type": "REPEAT",
              "content": {
                "type": "SYMBOL",
                "name": "_op_char"
              }
            }
          ]
        },
        {
          "type": "SYMBOL",
          "name": "_quote_op_left"
        },
        {
          "type": "SYMBOL",
          "name": "_quote_op_right"
        }
      ]
    }
  },
  "extras": [
    {
      "type": "PATTERN",
      "value": "\\s"
    }
  ],
  "conflicts": [
    [
      "symbolic_keyword",
      "symbolic_op"
    ],
    [
      "_quote_op_left",
      "symbolic_op"
    ],
    [
      "_quote_op_right",
      "symbolic_op"
    ],
    [
      "_quote_op_left",
      "symbolic_keyword"
    ],
    [
      "_quote_op_right",
      "symbolic_keyword"
    ]
  ],
  "precedences": [],
  "externals": [],
  "inline": [],
  "supertypes": []
}

